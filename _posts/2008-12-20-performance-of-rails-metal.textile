---
layout: post
title: Performance of Rails Metal
categories: []
author: Pratik Naik
published: true
date: 2008-12-20 00:25:00.000000000 +00:00
---
Josh recently added "Rails Metal":http://weblog.rubyonrails.org/2008/12/17/introducing-rails-metal, which has been getting a fair bit of publicity. Metal is a great piece of functionality for those rare cases where the speed of your framework actually matters. 

However, people have been reporting "25x speed increase":http://www.infoq.com/news/2008/12/rails-metal over a regular Rails action, and that just doesn't seem right. So I decided to do some benchmarking of 'Hello World' Rails action v/s Metal. Here are my results :

h2. Rails action

<filter:code>Time per request : 1.244 [ms]
Throughput : 800 request/second</filter:code>

h2. Metal

<filter:code>Time per request : 0.386 [ms]
Throughput : 3000 request/second</filter:code>

<i>You can find more details about benchmark command/code at "http://gist.github.com/38080":http://gist.github.com/38080</i>

Of course, these are not very scientific benchmarks and your results may vary a little from what you see here. You should also make sure you *run your benchmarks in production mode*.

Now, if you compare these results, 3000 r/s against 800 r/s, you may think you're seeing a 3x performance increase. However, that'd a wrong perception and throughput isn't the best metric here. 

Difference in *Time per request* is what you should looking at. In my benchmarks, speed increase I get when using Metal is about *1 millisecond*. And that's a constant speed increase I'll get over a regular Rails action. It's very important to understand that it's a *constant speed increase*. It'll always be 1 ms for me. 

For example, if my Rails action takes *12ms*, when I reimplement it all in Metal, it will take about *11 ms* and not 4 ms.

To conclude, I'll just quote DHH :

bq. But for those few, specialized cases where you just need as much raw speed as possible, Metal can be exactly what the doctor ordered. It allows you to have the best of both worlds in one package. The lowest possible overhead for a Rack application when that matters and the full-featured goodness of Action Controller when it doesnâ€™t.