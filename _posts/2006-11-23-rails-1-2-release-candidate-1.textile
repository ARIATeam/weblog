---
layout: post
title: ! 'Rails 1.2: Release Candidate 1'
categories:
- releases
author: David
published: true
date: 2006-11-23 06:01:00.000000000 +00:00
---
It's been almost eight months since the last major release of Rails introduced RJS, respond_to, eager loading, and much more. It's about time we introduced the latest batch of big ideas we've been polishing in the interim.

Since this is a major new release and we've gotten so much incredible uptake even since 1.1, we're feeling the need to certify that things work as well as they can out the gates. Thus, this release candidate to fret out any regressions or major issues with the new features.

*Update:*  "Josh Susser has more":http://blog.hasmanythrough.com/articles/2006/11/23/rails-1-2-rc1-and-test-cases on what this means for developers, and how best to go about submitting bug reports for the new release.

h1. What's New

But first, allow me to give you a short rundown of what you should be excited about. While these new features may not appear to have the immediate glitz and glamour the likes of RJS, they still represent a big fundamental shift in how a lot of Rails applications will be created from this day forth.

h1. REST and Resources

REST, and general HTTP appreciation, is the star of Rails 1.2. The bulk of these features were originally introduced to the general public in my "RailsConf keynote on the subject":http://blog.scribestudio.com/articles/2006/07/09/david-heinemeier-hansson-railsconf-2006-keynote-address. Give that a play to get into the mindset of why REST matters for Rails.

Then start thinking about how your application could become more RESTful. How you too can transform that 15-action controller into 2-3 new controllers each embracing a single resource with CRUDing love. This is where the biggest benefit is hidden: A clear approach to controller-design that'll reduce complexity for the implementer and result in an application that behaves as a much better citizen on the general web.

To help the transition along, we have a scaffold generator that'll create a stub CRUD interface, just like the original scaffolder, but in a RESTful manner. You can try it out with "script/generate scaffold_resource". Left with no arguments like that, you get a brief introduction to how it works and what'll create.

The only real API element that binds all this together is the new map.resources, which is used instead of map.connect to wire a resource-based controller for HTTP verb love. Then, once you have a resource-loving controller, you can link with our verb-emulation link @link_to "Destroy", post_url(post), :method => :delete@. Again, running the resource scaffolder will give you a feel for how it all works.

h1. Formats and respond_to

While respond_to has been with us since Rails 1.1, we've added a small tweak in 1.2 that ends up making a big difference for immediate usefulness of the feature. That is the magic of :format. All new applications will have one additional default route: @map.connect ':controller/:action/:id.:format'@. With this route installed, imagine the following example:

    class WeblogController < ActionController::Base
      def index
        @posts = Post.find :all
        respond_to do |format|
          format.html
          format.xml { render :xml => @posts.to_xml }
          format.rss { render :action => "feed.rxml" }
        end
      end
    end
 
    GET /weblog     # returns HTML from browser Accept header
    GET /weblog.xml # returns the XML
    GET /weblog.rss # returns the RSS

Using the Accept header to accomplish this is no longer necessary. That makes everything a lot easier. You can explore your API in the browser just by adding .xml to an URL. You don't need a before_filter to look for clues of a newsreader, just use .rss. And all of them automatically works with page and action caching.

Of course, this format-goodness plays extra well together with map.resources, which automatically makes sure everything Just Works. The resource-scaffold generator even includes an example for this using format.xml, so /posts/5.xml is automatically wired up. Very nifty!


h1. Multibyte

Unicode ahoy! While Rails has always been able to store and display unicode with no beef, it's been a little more complicated to truncate, reverse, or get the exact length of a UTF-8 string. You needed to fool around with KCODE yourself and while plenty of people made it work, it wasn't as plug'n'play easy as you could have hoped (or perhaps even expected). 

So since Ruby won't be multibyte-aware until this time next year, Rails 1.2 introduces ActiveSupport::Multibyte for working with Unicode strings. Call the <code>chars</code> method on your string to start working with characters instead of bytes. 

Imagine the string '€2.99'. If we manipulate it at a byte-level, it's easy to get broken dreams:

  '€2.99'[0,1] # => "\342"
  '€2.99'[0,2] # => "?"
  '€2.99'[0,3] # => "€"

The € character takes three bytes. So not only can't you easily byte-manipulate it, but String#first and TextHelper#truncate used to choke too. In the old days, this would happen:

  '€2.99'.first        # => '\342'
  truncate('€2.99', 2) # => '?'

With Rails 1.2, you of course get:

  '€2.99'.first        # => '€'
  truncate('€2.99', 2) # => '€2'

TextHelper#truncate/excerpt and String#at/from/to/first/last automatically does the .chars conversion, but if when you need to manipulate or display length yourself, be sure to call .chars. Like:

  You've written <%= @post.body.chars.length %> characters.

With Rails 1.2, we're assuming that you want to play well with unicode out the gates. The default charset for action renderings is therefore also UTF-8 (you can set another with @ActionController::Base.default_charset=(encoding)@). KCODE is automatically set to UTF-8 as well.

<a href="http://www.fngtps.com/2006/10/activesupport-multibyte">Watch the screencast.</a> (but note that manually setting the KCODE is no longer necessary)

Unicode was in greatest demand, but Multibyte is ready handle other encodings (say, Shift-JIS) as they are implemented. Please extend Multibyte for the encodings you use.

Thanks to Manfred Stienstra, Julian Tarkhanov, Thijs van der Vossen, Jan Behrens, and (others?) for creating this library.


h1. Gotchas

While we've tried our best to remain as backwards compatible with 1.1.6 as possible, there are a few minor edge cases that will need some rework if you used to do things a certain way.

h1. Routes

Action Pack has an all new implementation of Routes that's both faster and more secure, but it's also a little stricter. Semicolons and periods are separators, so a <code>/download/:file</code> route which used to match <code>/download/history.txt</code> doesn't work any more. Use <code>:requirements => { :file => /.*/ }</code> to match the period.

h1. Auto-loading

We've fixed a bug that allowed libraries from Ruby's standard library to be auto-loaded on reference. Before, if you merely reference the Pathname constant, we'd autoload pathname.rb. No more, you'll need to manually @require 'pathname'@ now.

We've also improved the handling of module loading, which means that a reference for Accounting::Subscription will look for app/models/accounting/subscription.rb. At the same time, that means that merely referencing Subscription will _not_ look for subscription.rb in any subdir of app/models. Only app/models/subscription.rb will be tried. If you for some reason depended on this, you can still get it back by adding app/models/accounting to config.load_paths in config/environment.rb.

h1. Prototype

To better comply with the HTML spec, *Prototype's Ajax-based forms no longer serialize disabled form elements.* Update your code if you rely on disabled field submission.

For consistency *Prototype's Element and Field methods no longer take an arbitrary number of arguments.* This means you need to update your code if you use Element.toggle, Element.show, Element.hide, Field.clear, and Field.present in hand-written JavaScript (the Prototype helpers have been updated to automatically generate the correct thing).
<pre><code>
// if you have code that looks like this
Element.show('page', 'sidebar', 'content');
// you need to replace it with code like this
['page', 'sidebar', 'content'].each(Element.show);
</code></pre>

h1. Action Mailer

All emails are MIME version 1.0 by default, so you'll have to update your mailer unit tests: <code>@expected.mime_version = '1.0'</code>


h1. Deprecation

Since Rails 1.0 we've kept a stable, backward-compatible API, so your apps can move to new releases without much work. Some of that API now feels like our "freshman 15":http://en.wikipedia.org/wiki/Freshman_15 so we're going on a diet to trim the fat.  *Rails 1.2 deprecates a handful of features which now have superior alternatives or are better suited as plugins.*

Deprecation isn't a threat, it's a promise! These features will be entirely gone in Rails 2.0. You can keep using them in 1.2, but you'll get a wag of the finger every time: look for unsightly deprecation warnings in your test results and in your log files.

Treat your 1.0-era code to some modern style. To get started, just run your tests and tend to the warnings.


h1. Installing 

The release candidate gems live in the Rails gem repository. You install them like this:

  gem install rails --source http://gems.rubyonrails.org --include-dependencies

Note that it'll say something like "Successfully installed rails-1.1.6.5618". That's correct as we won't use the final version numbers until the official release.

You can also grab it straight from Subversion with http://dev.rubyonrails.org/svn/rails/tags/rel_1-2-0_RC1.

h1. Submitting regression bugs

There you have it. Those are the major changes and as always, you can get the full, nitty-gritty scoop in the CHANGELOGs. Over the last eight months, we've made literaly hundreds of improvements. It's well worth traversing the CHANGELOGs for goodies. Ryan's Scraps is doing a good job "annotating the changes":http://www.ryandaigle.com/articles/category/whats-new-in-rails/page/1 as well.

But with the release of any new piece of software, a number of things which used to work, will work no longer.

While the intention with Rails 1.2 is to provide seamless backwards compatibility, we're only human, and chances are a few things have snuck through.   So if you're trying out the 1.2 release candidate, and find a bug, be sure to report it to us.  There are a few steps you should follow to help us fix your bug during the release canididate cycle.

When adding your bug report, be sure to put '1.2regression' in the keywords field.  Bugs with this keyword show up in a "trac report":http://dev.rubyonrails.org/report/29, if you're looking for a place to help out, start there.

If at all possible, please include a failing unit test with your bug report.  This makes our life significantly easier, and helps others verify that you've found a genuine case.