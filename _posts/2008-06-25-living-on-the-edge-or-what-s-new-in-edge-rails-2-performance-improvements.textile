---
layout: post
title: ! 'Living on the Edge (or what''s new in Edge Rails) #2 - Performance improvements'
categories:
- edge
author: Chu Yeow
published: true
date: 2008-06-25 16:24:00.000000000 +01:00
---
The "first Living on the Edge":http://weblog.rubyonrails.org/2008/6/20/living-on-the-edge-or-what-s-new-in-edge-rails-1-api-changes-and-performancetests covered some of the API changes since Rails 2.1, and this time round, I'm going to cover the *performance improvements* as promised.

Jumping right in...

h4. Faster Erb templates

Jeremy Kemper has made the Erb processing more efficient, especially the "concat":http://api.rubyonrails.org/classes/ActionView/Helpers/TextHelper.html#M001724 and "capture":http://api.rubyonrails.org/classes/ActionView/Helpers/CaptureHelper.html#M001747 helper methods.

The "special" Erb <code>_erbout</code> has been replaced with an instance variable, which allows for:
* better (memory) performance because <a href="http://www.ruby-doc.org/core/classes/Binding.html">bindings</a> are no longer being passed around,
* fewer eval<code></code>s which are usually expensive,
* there's no need to slice the <code>_erbout</code> variable when you can swap in a new (string) buffer, and
* the buffer is actually available via a <code>output_buffer</code> reader and writer methods (so you can override it if you want).

Relevant changesets: "933697a":http://github.com/rails/rails/commit/933697a5fc5f4c56c4fd7fbbd31b8973df9c1054
- "0bdb7d3":http://github.com/rails/rails/commit/0bdb7d353b4ac6f5470884360f9a480a16bd709c
- "4d4c8e2":http://github.com/rails/rails/commit/4d4c8e298f5396e6b8ace0a10d7f991594aace2d


h4. Faster partials and JavaScript helpers

Partial template initialization and JavaScript helpers have been refactored and optimized for speed and efficiency by Jeremy Kemper. These are but a few of the optimizations Jeremy has been committing recently. Be sure to check out some of the "commits to Rails":http://github.com/rails/rails/commits/master (or for that matter, any quality Open Source project) - you could learn something!

Relevant changesets: "partials":http://github.com/rails/rails/commit/d7b3c3395fd7debc05923dba1cbea69d30899827 - "JavaScript helpers":http://github.com/rails/rails/commit/f4ccc179530d5b9436da87d3c221dfa8fa89119a


h4. RecordIdentifier methods speedup

The "RecordIdentifier":http://api.rubyonrails.org/classes/ActionController/RecordIdentifier.html has been sped up by some simple use of memo-ization, thus reducing the number of inflections performed, among other things. The RecordIdentifier is used widely in cache keys, partial template paths, and in most places where you identify an ActiveRecord model without caring about its actual <code>id</code>.

Relevant changesets by Jeremy Kemper: "c1a9820":http://github.com/rails/rails/commit/c1a98209da7422965f5dd4f475603b8a3cc887e4 - "566d717":http://github.com/rails/rails/commit/566d717d783f56563cd602198be2177c972c9a81


h4. Lazy load cache and session stores

*Update*: Oops my bad, this change was later reverted in "6573f6a":http://github.com/rails/rails/commit/6573f6a4bc1c2ebd26e0b4b3ef9fe1cde3219354.

The various cache stores in the ActiveSupport::Cache module are now lazy loaded - this means that they are only <code>require</code>d when you actually start using them.

"Changeset by Pratik Naik":http://github.com/rails/rails/commit/19895f087c338d8385dff9d272d30fb87cb10330