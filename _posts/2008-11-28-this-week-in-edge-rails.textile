---
layout: post
title: This Week in Edge Rails
categories:
- edge
author: Mike Gunderloy
published: true
date: 2008-11-28 17:33:00.000000000 +00:00
---
Yesterday was Thanksgiving holiday for US-based developers - but it certainly hasn't looked like a holiday week in edge Rails. Things are moving fast, with some major changes afoot for version 2.3 of Rails.

h2. Rack integration

The underpinnings of script/server have been simplified and rewritten somewhat. The explicit list of supported servers that used to be in script/server is gone. Instead, Rails now depends on the installation of "Rack":http://rack.rubyforge.org/, and "script/server goes through this":http://github.com/rails/rails/commit/708f4c3ae6a41a46ab36a05ea4e126392b81511b - which means that Rails supports any server that Rack does.

h2. Efficient routes

Routing sees a couple of big changes this week. The <code>formatted_</code> route helpers are gone, in favor just passing in <code>:format</code> as an option. This cuts down the route generation process by 50% for any resource - and can save a substantial amount of memory (up to 100MB on large applications, according to the "Lighthouse ticket":http://rails.lighthouseapp.com/projects/8994/tickets/1359 ) If your code uses the <code>formatted_</code> helpers, it will still work for the time being - but that behavior is deprecated and your application will be more efficient if you rewrite those routes using the new standard. Another big change is that Rails now supports multiple routing files, not just routes.rb. You can use <code>RouteSet#add_configuration_file</code> to bring in more routes at any time - without clearing the currently-loaded routes. "commit":http://github.com/rails/rails/commit/fef6c32afe2276dffa0347e25808a86e7a101af1 "commit":http://github.com/rails/rails/commit/40b40c487040d9c721d486e8ec8cfbc53a8cd79a

h2. Better support for engine plugins

The second routing change enables better support for Rails Engines: routing files in engines are automatically loaded and reloaded now (as are those in other plugins). Engines are getting some love other than routing. If your plugin has an app folder, then app/[models|controllers|helpers] will automatically be added to the Rails load path. There's "active discussion":http://github.com/rails/rails/commit/63d8f56774dcb1ea601928c3eb6c119d359fae10#comments of just how this should work, and how much to pick up from the current engines plugins, so it's likely we haven't seen the last commits in this area. Engines also support adding view paths now. "commit":http://github.com/rails/rails/commit/4999d52e08a02ebba344f6c318f0af4b5b18f0e5 "commit":http://github.com/rails/rails/commit/63d8f56774dcb1ea601928c3eb6c119d359fae10 "commit":http://github.com/rails/rails/commit/3cc9d1c5ad1639283b43ee2b6099cb4f3b19bf23 "commit":http://github.com/rails/rails/commit/f2ee056873b84f8917e72d87181e1a9f5f653342

h2. Sensible backtraces for your tests

If you're a fan of the Thoughtbot "Quiet Backtrace":http://www.thoughtbot.com/projects/quietbacktrace plugin, which allows you to selectively remove lines from Test::Unit backtraces, you'll be happy to find <code>ActiveSupport::BacktraceCleaner</code> and <code>Rails::BacktraceCleaner</code> in core. This supports both filters (to perform regex-based substitutions on backtrace lines) and silencers (to remove backtrace lines entirely). Rails automatically adds silencers to get rid of the most common noise in a new application, and builds a <code>config/backtrace_silencers.rb</code> file to hold your own additions. "commit":http://github.com/rails/rails/commit/f42c77f927eb49b00e84d355e07de48723d03fcb

h2. Ruby 1.9 integration

A variety of commits continue the drive towards Ruby 1.9 and "minitest":http://blog.zenspider.com/minitest/ compatibility. This should ensure that Rails 2.3 is ready to handle the latest Ruby underpinnings when it's released. Those on the bleeding edge at the moment need to beware, though: one of the "changes":http://github.com/rails/rails/commit/e7208d382a3d8bae9ab13d8a380b1a2a05fd99b0 in edge Rails depends on a "ruby-core patch":http://redmine.ruby-lang.org/issues/show/771 that hasn't yet been applied there. You'll also (temporarily) need to pick up Jeremy Kemper's "fork of Mocha":http://github.com/jeremy/mocha/tree/master for MiniTest compatability as required by "this commit":http://github.com/rails/rails/commit/e931012287df0bca83cae04d95c2e0835ae08758 .

h2. Faster boot time in development mode with lazy loading/autoload

Jeremy Kemper and Josh Peek have been doing a ton of work on making sure that bits of Rails (and its dependencies) are only brought into memory when they're actually needed. Check out the commits from November 23 for a bunch of lazy-loading changes. The core frameworks - Active Support, Active Record, Action Controller, Action Mailer and Action View - are now using <code>autoload</code> to lazy-load their individual classes. This work should help keep the memory footprint down and improve overall Rails performance. "commit":http://github.com/rails/rails/commit/e201fc750bf4b7dff1875b7fcdd47f1686ef2052 "commit":http://github.com/rails/rails/commit/2c01f2b4e9d4a95bb2baca8ae57209eb10aa78b2 "commit":http://github.com/rails/rails/commit/31ce92f7b5784bc5b6a441e88cd734c7b8b1c58f "commit":http://github.com/rails/rails/commit/7254d23764f7abe8023f3daeb07d99ea1c8e777a "commit":http://github.com/rails/rails/commit/368117c0411a636a0cbfdc33fbf679c3e9233da7 

h2. Misc

You can specify using the new <code>preload_frameworks</code> option whether the core libraries should be autoloaded at startup. This defaults to <code>false</code> so that Rails autoloads itself piece-by-piece, but there are some circumstances where you still need to bring in everything at once - Passenger and JRuby both want to see all of Rails loaded together. "commit":http://github.com/rails/rails/commit/104f3a57768602289299b3be0fab5b1ed21d7653

Asset hosts get more flexible in edge Rails with the ability to declare an asset host as a specific object that responds to a call. DHH has supplied a sample project, "asset-hosting-with-minimum-ssl":http://github.com/dhh/asset-hosting-with-minimum-ssl/tree/master , that demonstrates one good use for this functionality. "commit":http://github.com/rails/rails/commit/229f959d15e451890db60dbb73f8565079977814

You can now configure the location of the helpers folder for a Rails application by setting <code>ActionController::Base.helpers_dir</code>. This will be a boon in some unusual circumstances - the original "use case":http://rails.lighthouseapp.com/projects/8994/tickets/1424 is for building a Rails application that encourages extension via plugin rather than by altering the application itself. "commit":http://github.com/rails/rails/commit/bdf995bc5da016e99d1636e62b39c92384263a9c

Token generation for CSRF protection has been simplified; now Rails uses a simple random string generated by <code>ActiveSupport::SecureRandom</code> rather than mucking around with session IDs. As a result, the <code>:digest</code> and <code>:secret</code> options to <code>protect_from_forgery</code> are deprecated and have no effect on edge. "commit":http://github.com/rails/rails/commit/9fdb15e60f4d4e37916e5354c50d559773bbe014

While we're on the subject of secrets, some people will find novel uses for <code>ActiveSupport::MessageEncryptor</code>, which provides a simple way to encrypt information for storage in an untrusted location (like cookies). "commit":http://github.com/rails/rails/commit/07abc5efe1bc71902b0c517ef97dcb36564f2336

Active Support's <code>from_xml</code> no longer depends on XmlSimple. Instead, Rails now includes its own XmlMini implementation, with just the functionality that it requires. This lets Rails dispense with the bundled copy of XmlSimple that it's been carting around. "commit":http://github.com/rails/rails/commit/fea8d9d06ffaf85eb9e590ae3ac7cf082ad0c420 "commit":http://github.com/rails/rails/commit/b7fef2610b239db923909cc0fbfc33e6080fe0c4

As you probably recall, last week's improvements included the renaming of application.rb to application_controller.rb. This week there's a new rake task, <code>rake rails:update:application_controller</code> to do this automatically for you - and it will be run as part of the normal <code>rake rails:update</code> process. "commit":http://github.com/rails/rails/commit/9e08a3bb1d47f79b6953056e72eee58e86d83ead

Good news if you're using <code>ActiveSupport::OrderedHash</code>: it now implements <code>each_key</code> and <code>each_value</code>. "commit":http://github.com/rails/rails/commit/05a938c5f7804fd59c76c45df096e6ebff871a18

One more bit of core Rails is open to I18n: the units used by <code>number_to_human_size</code>. If you're maintaining a translation file, you need to add the <code>storage_units: [Bytes, KB, MB, GB, TB]</code> to your translations. "commit":http://github.com/rails/rails/commit/d36158794b19ee8ea49d74061218b37d4301f0f9

Support for Rails components - which were famously called "a shining example of what happens when eagerness overtakes prudence" in Agile Web Development With Rails - is finally gone. If a couple of years of warning about this deprecation wasn't enough for you, then it's time to find an alternate solution at last. "commit":http://github.com/rails/rails/commit/36dcfcf126b7e7ba33ebe0d7148c9023e7494464

Various files in /public that deal with CGI and FCGI dispatching are no longer generated in every Rails application by default (you can still get them if you need them by adding <code>--with-dispatches</code> when you run the rails command, or add them later with <code>rake rails:generate_dispatchers</code>). "commit":http://github.com/rails/rails/commit/5b5730cc6e9194fb5f67fe79d2c7849e200ba6ed "commit":http://github.com/rails/rails/commit/1cbdd53bd383e7d1dc34cad50c22ff5a330bbf91

Just a reminder: I'm not providing pointers to every single commit here, just trying to highlight things. This week's edge changes actually included 136 commits from a wide variety of contributors.